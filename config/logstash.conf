input {
  stdin {}
  gelf {
    port => 12201
  }
  http {
    port => 12202
  }
  tcp {
    port => 12203
    codec => "fluent"
    tags => [ "gelf" ]
  }
  syslog {
    port => 12204
    tags => [ "syslog" ]
  }
}

filter {
  if "syslog" in [tags] {
    drop {}
    # TODO remove the above line and uncomment the block below to parse and forward auditd logs
    #kv {
    #  target => 'details'
    #}
    #if [program] == 'audispd' and ([details][type] == 'EXECVE' or [details][type] == 'SYSCALL' or [details][type] == 'CWD') {
    #  ruby { code => "event['timestamp'] = event['details']['msg'].split(':')[0].tr('audit(', '').to_f" }
    #  ruby { code => "event['trace-id'] = event['details']['msg'].split(':')[1].tr(')', '').to_s" }
    #  if [details][type] == 'EXECVE' {
    #    ruby { code => "event['command'] = [event['details']['a0'], event['details']['a1'], event['details']['a2'], event['details']['a3'], event['details']['a4'], event['details']['a5'], event['details']['a6'], event['details']['a7'], event['details']['a8'], event['details']['a9'], event['details']['a10'], event['details']['a11'], event['details']['a12'], event['details']['a13'], event['details']['a14'], event['details']['a15'], event['details']['a16'], event['details']['a17'], event['details']['a18'], event['details']['a19'], event['details']['a20'], event['details']['a21'], event['details']['a22'], event['details']['a23'], event['details']['a24'], event['details']['a25'], event['details']['a26']].join(' ')" }
    #    mutate { strip => [command] }
    #  }
    #} else {
    #  drop {}
    #}
  } # end of syslog filter

  if "gelf" in [tags] {
    json {
      source => "[log]"
      skip_on_invalid_json => true
    }

    # ###################################################################################################################
    # Clean fields with mixed types
    # ###################################################################################################################
    # sending fields of inconsistent types causes 
    
    # sending fields of inconsistent types causes elasticsearch to complain about the index of the inconsistent fields
    # and will reject the messages

    if [service-instance] == "-" {
      # uwsgi often sends '-' as the service-instance instead of an integer
      # for now just remove the problematic field
      ruby { code => 'event.remove("service-instance")' }
    }
    if [level] {
      # several services send strings as the level field
      ruby {
        code => '
          if event.get("level").is_a? String
            event.set("level-name", event.get("level"))
            event.remove("level")
          end
        '
      }
    }
    if [stream] {
      ruby { code => 'event.remove("stream")' }
    }
    if [port] {
      ruby { code => 'event.remove("port")' }
    }
    if [kubernetes.pod_name] {
      ruby { code => 'event.remove("kubernetes.pod_name")' }
    }
    if [kubernetes.pod_id] {
      ruby { code => 'event.remove("kubernetes.pod_id")' }
    }
    if [kubernetes.namespace_id] {
      ruby { code => 'event.remove("kubernetes.namespace_id")' }
    }
    if [kubernetes.master_url] {
      ruby { code => 'event.remove("kubernetes.master_url")' }
    }
    if [kubernetes.labels.tier] {
      ruby { code => 'event.remove("kubernetes.labels.tier")' }
    }
    if [kubernetes.labels.test] {
      ruby { code => 'event.remove("kubernetes.labels.test")' }
    }
    if [kubernetes.labels.pod-template-hash] {
      ruby { code => 'event.remove("kubernetes.labels.pod-template-hash")' }
    }
    if [kubernetes.namespace_name] {
      ruby { code => 'event.remove("kubernetes.namespace_name")' }
    }
    if [kubernetes.labels.namespace] {
      ruby { code => 'event.remove("kubernetes.labels.namespace")' }
    }
    if [kubernetes.labels.io_kompose_service] {
      ruby { code => 'event.remove("kubernetes.labels.io_kompose_service")' }
    }
    if [kubernetes.pod_name] {
      ruby { code => 'event.remove("kubernetes.pod_name")' }
    }
    if [kubernetes.pod_id] {
      ruby { code => 'event.remove("kubernetes.pod_id")' }
    }
    if [kubernetes.namespace_id] {
      ruby { code => 'event.remove("kubernetes.namespace_id")' }
    }
    if [docker.container_id] {
      ruby { code => 'event.remove("docker.container_id")' }
    }
    #if [kubernetes.container_name] {
     # ruby { code => 'event.set("container_name", event.get("kubernetes.container_name"))' }
   # }
    # ###################################################################################################################
    # Normalize trace and span identifiers
    # ###################################################################################################################

    if [trace-id] and [trace-id] != "-" {
      ruby { code => 'event.set("trace-origin", event.get("trace-id").split("-")[1..-1].join("-"))' }
      ruby { code => 'event.set("trace-id", event.get("trace-id").split("-")[0])' }
    }
    if [span-id] and [span-id] != "-" {
      ruby { code => 'event.set("span-origin", event.get("span-id").split("-")[1..-1].join("-"))' }
      ruby { code => 'event.set("span-id", event.get("span-id").split("-")[0])' }
    }
    if [parent-span-id] and [parent-span-id] != "-" {
      ruby { code => 'event.set("parent-origin", event.get("parent-span-id").split("-")[1..-1].join("-"))' }
      ruby { code => 'event.set("parent-span-id", event.get("parent-span-id").split("-")[0])' }
    }

    # ###################################################################################################################
    # Normalize version field
    # ###################################################################################################################

    if [image_name] {
      ruby { code => 'event.set("version", event.get("image_name").split(":")[-1])' }
    }

    # ###################################################################################################################
    # Normalize request_time_microseconds
    # ###################################################################################################################

    if "nginx" in [tags] {
      # nginx logs request time in seconds(float) precise to the 1000th of a second, 1 millisecond displays as 0.001
      ruby { code => 'event.set("[request][request_time_microseconds]", (event.get("[request][request_time]").to_f * 1000000).to_i)' }
    }
    if "varnish" in [tags] or "uwsgi" in [tags] {
      # varnish and uwsgi log request time in microseconds(integers). 1 second displays as 1000000
      ruby { code => 'event.set("[request][request_time_microseconds]", event.get("[request][request_time]").to_i)' }
      ruby { code => 'event.set("[request][request_time]", event.get("[request][request_time]").to_f / 1000000)' }
    }

    # ###################################################################################################################
    # Normalize timestamp and timestamp_microseconds
    # ###################################################################################################################

    if "nginx" in [tags] {
      # nginx logs the timestamp in seconds with a milliseconds resolution at the time of log write
      # subtract the request duration from the timestamp to get the proper timestamp for the start of the request
      ruby { code => 'event.set("timestamp", (event.get("timestamp").to_f - event.get("[request][request_time]").to_f))' }
      ruby { code => 'event.set("timestamp_microseconds", (event.get("timestamp") * 1000000).to_i)' }
    }

    if "varnish" in [tags] {
      # varnish logs the timestamp in seconds with a microseconds resolution at the start of the request
      ruby { code => 'event.set("timestamp", event.get("timestamp").to_f)' }
      ruby { code => 'event.set("timestamp_microseconds", (event.get("timestamp") * 1000000).to_i)' }
    }

    if "uwsgi" in [tags] {
      # uwsgi logs the timestamp in microseconds resolved at the start of the request
      ruby { code => 'event.set("timestamp_microseconds", event.get("timestamp").to_i)' }
      ruby { code => 'event.set("timestamp", event.get("timestamp").to_f / 1000000)' }
    }

    # ###################################################################################################################
    # Normalize Realm
    # ###################################################################################################################

    if [host] {
      ruby { code => 'event.set("realm", event.get("host"))' }
    }

    # determine geoip from client ip. Useful for mapping request locations.
    # won"t create a geoip field unless the ip is resolvable and the geoip lookup returns a lat and long.
    # TODO uncomment the line below when we start getting traffic from external clients
    # geoip { source => "[request][remove_addr]' }

  }  # end of gelf filter

  # ###################################################################################################################
  # Misc.
  # ###################################################################################################################

  # convert the timestamp to a date field
  if [timestamp] {
    date {
      match => [ "[timestamp]" , "ISO8601", "UNIX", "UNIX_MS", "TAI64N" ]
      target => "timestamp"
    }
  } else {
    ruby {
      code => 'event.set("timestamp", event.get("@timestamp"))'
    }
  }

  # ###################################################################################################################
  # Drop extraneous messages.
  # ###################################################################################################################

  if [name] =~ "urllib" or "negotiator.negotiator" == [name] or "schedule" == [name] or "boto" == [name] or "pydub.converter" == [name] {
    drop { }
  }
  if [name] =~ "botocore" {
    drop { }
  }
  if [message] == "Adding X-Trace-Id header" or [message] == "Running pending tasks" {
    drop { }
  }
  if [kubernetes.container_name] =~ "fluentd" {
    drop { }
  }
  if [container_name] =~ "cluster-autoscaler" {
    drop { }
  }
  if [container_name] =~ "recommender" {
    drop { }
  }
  # ###################################################################################################################
  # ES Index Logic
  # ###################################################################################################################
  # Leverage @metadata to perform logic on the ES index
  # See https://www.elastic.co/guide/en/logstash/current/event-dependent-configuration.html#metadata
  mutate {
    add_field => {
      "[@metadata][es_index]" => "logstash-al-%{+YYYY.MM.dd}"
    }
  }
  ruby {
    code => '
      event.set("[@metadata][es_index_length]", event.get("[@metadata][es_index]").length)
    '
  }
  if [@metadata][es_index_length] > 22 {
    ruby {
      code => '
        event.remove("[@metadata][es_index]")
      '
    }
  }
}

output {
  if ![@metadata][es_index] {
    stdout {}
  }
  if [@metadata][es_index] {
    elasticsearch {
      hosts => ["http://search-al-logstash-xuzphpkychw2zzxe2txxl35szy.us-east-1.es.amazonaws.com:80"]
      index => "%{[@metadata][es_index]}"
      document_type => "logs"
    }
  }
}
